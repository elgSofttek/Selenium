[
    {
        "Texto visible": "UNIVERSIDAD AUTÓNOMA\nDE NUEVO LEÓN\nServicios en Línea\nES\nALUMNOS\nASPIRANTES\nDOCENTES\nEGRESADOS\n\nInicio\nAcerca de la UANL\nOferta Educativa\nVida Estudiantil\nInvestigación\nBibliotecas\nMedios\nPróximos eventos\nVer todos\n7 MAY\n7 MAY\n7 MAY\n10:00 am\n13 MAY\n1:00 pm\nNoticias UANL\nVER MÁS NOTICIAS\nDeportes\nMay 2025\nAlumno de la Universidad va por título mundial en muaythai\nEstudiantiles\nMay 2025\nObtiene egresada premio al mejor póster estudiantil Clark Hubbs\nAcadémico\nMay 2025\nImpulsan investigación científica en coloquio interdisciplinario\nArte y Cultura\nMay 2025\nPresenta Artes Escénicas una adaptación actual de “La Odisea”\nActualidad\nMay 2025\nFavorecen consultorías y análisis económicos del CIE al desarrollo regional\nInternacional\nMay 2025\nDominio del coreano abre posibilidades laborales de los estudiantes\nInvestigadores reciben registro ante el IMPI\nHimno de la UANL\nFoto de la Comunidad\nRepositorio Institucional\nIR A REPOSITORIO\nDocumentos recientes:\nPlaneación del desarrollo de la zona citrícola del estado de Nuevo León\n\"Legoff, J. (1982) Tesis de Maestría\".\nLas relaciones industriales ante el tratado de libre comercio entre Canadá, México y los Estados Unidos\n\"Vallecillo, M. (1994). Tesis de Maestría\".\nEl divorcio y su recupercusión en las áreas psicológica, académica y social, en niños de 6 a 11 años, de la ciudad de Saltillo, Coahuila\n\"Juárez, L. (2002) Tesis de Maestría\".\nComposición nutrimental de cuatro especies forrajeras xerófitas del Noreste de Nuevo León, México\n\"Dominguez, T. (2013) Tesis de Doctorado\".\nVideo Institucional\nOferta Educativa\nSorteo de la Siembra Cultural\nContáctanos\nQueremos saber de ti.\n¡Contáctanos!\nMail Facebook Twitter YouTube Tiktok Instagram\nEventos\nNoticias\nTransparencia\nVida Universitaria\nAviso de privacidad\nCentro de ayuda UniOnline\nUniversidad Autónoma de Nuevo León © 2019 Ciudad Universitaria, Pedro de Alba s/n San Nicolás de los Garza, Nuevo León C.P. 66455 Tel. (81) 8329-4000",
        "URL actual": "https://www.uanl.mx/"
    },
    {
        "Texto visible": "Ir al contenido\nMenú principal\nBuscar\nApariencia\nDonaciones\nCrear una cuenta\nAcceder\nHerramientas personales\nPortada\nDiscusión\nLeer\nVer código fuente\nVer historial\nHerramientas\nBienvenidos a Wikipedia,\nla enciclopedia de contenido libre\nque todos pueden editar.\n2 030 967 artículos en español.\nCafé\n¿Cómo colaborar?\nPrimeros pasos\nAyuda\nContacto\nArtículo destacado\nMatrimonio igualitario en Ecuador\nAlexandra Chávez y Michelle Avilés, primera pareja del mismo sexo en contraer matrimonio en Ecuador.\nEl matrimonio igualitario en Ecuador es legal desde el 8 de julio de 2019, fecha en que entraron en vigencia dos sentencias de la Corte Constitucional en que falló a favor de este derecho por vía de control de constitucionalidad. De este modo, Ecuador se convirtió en el quinto país de América del Sur en legalizar el matrimonio igualitario, luego de Argentina, Uruguay, Brasil y Colombia. Antes de la legalización del matrimonio, las parejas del mismo sexo en el país contaban con reconocimiento estatal únicamente a través de las uniones de hecho, figura legal más restrictiva que se encontraba vigente desde 2009.\nLos esfuerzos para legalizar el matrimonio igualitario desde el activismo LGBT inicieron en 2013, cuando una pareja de mujeres se presentó fallidamente ante el Registro Civil de Quito para intentar casarse. La pareja llevó su caso a los tribunales nacionales, pero su reclamo pasó años sin obtener resolución de última instancia. La publicación de la Opinión Consultiva OC-24/17 en 2018, que exhortaba a los países miembros de la Convención Americana a reconocer el matrimonio entre personas del mismo sexo, infundió nuevo ímpetu a estos esfuerzos y llevó a que diez nuevas parejas intentaran casarse y a que presentaran recursos legales propios. Los recursos de dos de ellas llegaron al año siguiente a la Corte Constitucional en los casos 10-18-CN y 11-18-CN, que fueron resueltos el 12 de junio de 2019 y en cuyas sentencias se reconoció el derecho de las personas del mismo sexo a casarse, con lo que legalizó el matrimonio igualitario en el país.\nDurante el primer año de vigencia del cambio legal, se llevaron a cabo más de 120 matrimonios entre parejas del mismo sexo en Ecuador, cifra que subió a los 1014 al cumplirse los cinco años. Durante este periodo, el número de matrimonios igualitarios vio un crecimiento anual sostenido. La opinión pública también varió de forma considerable en los años previos a la legalización. De acuerdo a una encuesta de Pew Research Center, para el 2014 solo el 16% de ecuatorianos apoyaba el matrimonio igualitario, mientras que para 2017 el apoyo había alcanzado el 33%. Una encuesta de la Universidad Vanderbilt, por su lado, halló en 2019 una diferencia marcada en la desaprobación al matrimonio entre las distintas generaciones etarias: mientras que la generación silenciosa mostraba un 68.5% de desaprobación, este porcentaje bajaba hasta el 16.7% en la generación Z.\nLeer\nTodos los artículos destacados\nArtículo bueno\nSamurai 8: la leyenda de Hachimaru\nSamurái 8: la leyenda de Hachimaru (サムライ8 八丸伝 Samurai Eito: Hachimaruden?) es una serie de manga escrita por Masashi Kishimoto e ilustrada por Akira Ōkubo. La historia está ambientada en un mundo que combina ciencia ficción con elementos tradicionales japoneses, y está protagonizada por Hachimaru, un joven samurái parte cíborg que recorre el mundo junto con su maestro, un guerrero legendario con apariencia de gato, a fin de hacerse con un objeto que contiene poderes divinos.\nPara esta obra se apostó por la yuxtaposición de dos conceptos que a Kishimoto le interesaban pero que difieren entre sí: ciencia ficción y samuráis. Fue muy publicitada, ya que el autor venía de escribir uno de los mangas más populares de la historia, Naruto.\nLeer\nTodos los artículos buenos\nRecurso del día\nAdoración de los pastores\nAdoración de los pastores es un óleo realizado por el Greco hacia 1612-1614. Sus dimensiones son de 319 × 180 cm. Se expone en el Museo del Prado, Madrid.\nArchivo\nActualidad\nGuerra Israel-Gaza - Invasiones israelíes del Líbano y de Siria\nInvasión rusa a Ucrania\nAranceles en Estados Unidos\nDeportación de inmigrantes en Estados Unidos\n7 de mayo: Cónclave\n6 de mayo: Máximo de las Eta Acuáridas\n5 de mayo: Cierre de Skype\n5 de mayo: Día de la Raíz Cuadrada\n4-17 de mayo: Campeonato Europeo Femenino Sub-17 de la UEFA\n4 de mayo: Elecciones presidenciales de Rumania\n3-4 de mayo: Seven de Estados Unidos de rugby\n3-4 de mayo: e-Prix de Mónaco\n2-4 de mayo: Gran Premio de Miami de Fórmula 1\n1-11 de mayo: Copa Mundial de Fútbol de Playa de la FIFA\n30 de abril-24 de mayo: Campeonato Sudamericano Femenino Sub-17\n29 de abril-4 de mayo: Tour de Romandía\n28 de abril: Apagón en la península ibérica\n22 de abril-4 de mayo: Masters de Madrid de tenis\nFallecimientos\n4 de mayo: Jochen Mass, piloto de automovilismo alemán (78)\n4 de mayo: Petros Moliviatis, político griego (96)\n4 de mayo: David Karako, futbolista y entrenador israelí (80)\n4 de mayo: Rafael Rullán, baloncestista español (73)\n3 de mayo: Pedro Hidalgo, político chileno (89)\n3 de mayo: Sırrı Süreyya Önder, cineasta, actor y político turco (62; en la imagen superior)\n3 de mayo: Paul Van Hoeydonck, pintor y escultor belga (99; en la imagen inferior)\n2 de mayo: Jorge Iván Castaño Rubio, obispo católico colombiano (89)\n2 de mayo: Dara Birnbaum, artista estadounidense (78)\n2 de mayo: Fidel Herrera Beltrán, político mexicano (76)\n2 de mayo: Esteban Escudero, obispo español (79)\n1 de mayo: David Woodfield, futbolista y entrenador británico (81)\n1 de mayo: Andrejs Prohorenkovs, futbolista letón (48)\n1 de mayo: Larry Johnson, baloncestista estadounidense (70)\n1 de mayo: Nana Caymmi, cantante brasileña (76)\n30 de abril: Joe Louis Walker, músico estadounidense (75)\nConmemoraciones y fiestas\n6 de mayo: Día Mundial del Asma\n6 de mayo: Día Internacional Sin Dietas\n5-11 de mayo: Semana de Sensibilización sobre el Mosquito\n5 de mayo: Día del Patrimonio Mundial Africano\n5 de mayo: Día Internacional de la Partera\n5 de mayo: Día Internacional del Celíaco\n\nVéase también: Categoría:Actualidad, 2025, Categoría:2025\nOtros eventos actuales\nEfemérides\n5 de mayo\n1925 (hace 100 años): Nace Leo Ryan, político estadounidense (f. 1978).\n1925 (hace 100 años): Nace Željko Čajkovski, futbolista y entrenador croata (f. 2016).\n1995 (hace 30 años): Fallece Mijaíl Botvínnik, ajedrecista ruso (n. 1911; en la imagen).\n2000 (hace 25 años): En Estados Unidos, se emite el último episodio de la serie Boy Meets World.\n2000 (hace 25 años): Fallece Gino Bartali, ciclista italiano (n. 1914).\n4 de mayo\n5 de mayo\n6 de mayo\nPortales\nArtes: Arquitectura – Cine – Danza – Literatura – Música – Música clásica – Pintura – Teatro\nCiencias sociales: Comunicación – Deporte – Derecho – Economía – Feminismo – Filosofía – LGBT – Lingüística – Psicología – Sociología\nCiencias naturales: Astronomía – Biología – Botánica – Física – Medicina – Matemática – Química\nGeografía: África – América – Antártida – Asia – Europa – Oceanía – Países\nHistoria: Prehistoria – Edad Antigua – Edad Media – Edad Moderna – Edad Contemporánea\nPolítica: Marxismo – Nacionalismo – Socialismo – Terrorismo\nReligión: Ateísmo – Budismo – Cristianismo – Iglesia católica – Islam – Judaísmo – Mitología\nTecnologías: Biotecnología – Exploración espacial – Informática – Ingeniería – Software libre – Videojuegos\nOtros proyectos de la Fundación Wikimedia\nWikipedia es uno de los proyectos Wikimedia, de contenido libre y administrados técnicamente por la Fundación Wikimedia, una organización estadounidense sin fines de lucro.\nWikcionario\nDiccionario con sinónimos\nWikilibros\nLibros de texto y manuales\nWikiquote\nColección de citas\nWikisource\nLa biblioteca libre\nWikispecies\nDirectorio de especies\nWikinoticias\nNoticias libres\nCommons\nImágenes y multimedia\nMeta-Wiki\nCoordinación de proyectos\nWikiversidad\nPlataforma educativa libre\nWikiviajes\nGuía de viajes\nWikidata\nBase de datos libre\nMediaWiki\nDesarrollo de software libre\n62 idiomas\nEl texto está disponible bajo la Licencia Creative Commons Atribución-CompartirIgual 4.0; pueden aplicarse cláusulas adicionales. Al usar este sitio aceptas nuestros términos de uso y nuestra política de privacidad.\nWikipedia® es una marca registrada de la Fundación Wikimedia, una organización sin ánimo de lucro.\nPolítica de privacidad\nAcerca de Wikipedia\nLimitación de responsabilidad\nCódigo de conducta\nDesarrolladores\nEstadísticas\nDeclaración de cookies\nVersión para móviles",
        "URL actual": "https://es.wikipedia.org/wiki/Wikipedia:Portada"
    },
    {
        "Texto visible": "DevTalles\nCursos Programas +DevTalles +Talento Empresarial Ofertas Iniciar sesión\n¡Impulsa tu carrera hasta las estrellas!\nAprende a tu ritmo y potencia tu carrera desde cualquier lugar del universo, con nuestros cursos en línea de frontend y backend de la mano de expertos.\nTODOS LOS CURSOS A $10 CON EL CUPÓN: MAYO-2025\n EXPLORAR OFERTAS\n{ZONA DE DESPEGUE}\n+630k\nEstudiantes explorando nuestra galaxia del conocimiento\n+40k\nMiembros navegando juntos en nuestra comunidad de Discord\nUNIRME AL VIAJE\nEXPLORAR CURSOS\n{PROGRAMA DE APRENDIZAJE}\n\n\n\n\n\n\n\n\n\n\n{CURSOS}\nDescubre los cursos en nuestra plataforma, diseñados para brindarte una educación de calidad y ayudarte a alcanzar tus objetivos de aprendizaje.\nFlutter + Gemini: Aplicaciones con inteligencia artificial\nAprende a trabajar con la inteligencia artificial de Google Gemini y su SDK nativo, siguiendo buenas prácticas y recomendaciones de la documentación oficial.\nReact Router: Navegación declarativa y framework\nAprende a trabajar con React Router tanto como librería para proyectos tipo SPA o trabajarlo cómo Framework y obtener el máximo provecho de server actions, route modules, pre-rendering y mucho más!\nPython: Fundamentos hasta los detalles\nAprende las bases de Python: variables, estructuras de control, ciclos, funciones, POO, errores, módulos y entornos virtuales. Ideal para principiantes o quienes desean reforzar conceptos con ejemplos prácticos y aplicar Python en distintas áreas.\nC#: Empieza tu camino en el lenguaje\nAprende C# desde cero, domina desde la sintaxis básica, estructuras de control y POO, manejo de excepciones, LINQ y manejo de archivos JSON, arquitectura MVC e introducción a desarrollo api web con ASP.NET Core.\nJava: Explora el lenguaje desde cero\nAprende Java desde cero, dominando la sintaxis, POO, estructuras de datos y manejo de excepciones. Explora la jerarquía de clases, colecciones, archivos y el uso de patrones como MVC.\nNestJS + Testing: Pruebas unitarias y end to end (e2e)\nAquí aprenderán a realizar pruebas unitarias, integración y de extremo a extremo (E2E) de sus aplicaciones hechas en NestJS utilizando Jest, siguiendo estándares recomendados.\n  CURSOS Y SUSCRIPCIONES→ \n  RECURSOS GRATUITOS→ \n¡Aprende en cada episodio!\nÚnete a Fernando Herrera en conversaciones sobre las últimas tendencias, experiencias y consejos prácticos para impulsar tu crecimiento en el mundo de las tecnologías de la información.\nSPOTIFY PODCAST→\nAPPLE PODCAST→\n¡Explora nuestra comunidad!\nConéctate con otros estudiantes en nuestra comunidad de Discord y con DevTalles PRO, accede a nuestra comunidad exclusiva de cursos en construcción desde tu portal de estudiante.\nCOMUNIDAD DISCORD→\nMI PORTAL→\nLleva a tu equipo al siguiente nivel, potenciando sus habilidades y preparándolos para el futuro\nImpulsa tu negocio al fortalecer las habilidades de tu equipo con DevTalles para Empresas.\nSABER MÁS\n{TRIPULACIÓN}\nFernando Herrera\nCEO e Instructor de DevTalles\nAnalista programador con más de 20 años en el desarrollo de aplicaciones frontend y backend.\n \n\nGabriel Chaldú\nInstructor de DevTalles\nDesarrollador de software con más de 12 años de experiencia en varios lenguajes, incluido Java, enfocado en optimizar el código y promover el crecimiento profesional.\nTeddy Paz\nInstructor de DevTalles\nDesarrollador de software con más de 12 años de experiencia en Python, C# y otros lenguajes, y apasionado instructor, enfocado en mejorar el código y fomentar el crecimiento profesional.\nRicardo Cuéllar\nInstructor de DevTalles\nDesarrollador FullStack especializado en Python y Django, con enfoque en backend y sistemas complejos. Comprometido con la mejora continua y el apoyo a otros desarrolladores.\n\n\n\n\n\n\n\nAndrea Herrera\nSupervisora de RRHH y Administración\n\nEmin Reyes\nGestor de Operaciones y Estrategia Educativa\n\n\n\n\n\n\n\n\n\n\n\nSuscripción\nDevtalles PRO Mensual\nUSD16\n\nSuscribirme ahora\nAcceso ilimitado a toda la plataforma, cursos, clases en vivo, acceso anticipado a cursos durante el mes de vigencia.\nSuscripción\nDevTalles PRO Trimestral\nUSD48\n\nSuscribirme ahora\nAcceso ilimitado a toda la plataforma, cursos, clases en vivo, acceso anticipado a cursos durante 3 meses de vigencia.\nSuscripción\nDevTalles PRO Semestral\nUSD96\n\nSuscribirme ahora\nAcceso ilimitado a toda la plataforma, cursos, clases en vivo, acceso anticipado a cursos durante los 6 meses de vigencia.\nSuscripción\nDevTalles PRO Anual\nUSD176\nEl mejor precio disponible\nSuscribirme ahora Adquiere 1 año entero de suscripción al precio de 11 meses. Obtienes acceso ilimitado a toda la plataforma, comunidades, cursos, clases en vivo, acceso anticipado a una comunidad exclusiva y cursos en construcción.\nInicio\nTérminos y condiciones\nPolíticas de privacidad\nFAQ\nContáctanos\nBuscar cursos\nDevTalles Twitter\nDevTalles Youtube\nDevTalles LinkedIn\nDevTalles Discord\nFernando Herrera\nCopyright © 2025 devTalles.com todos los derechos reservados",
        "URL actual": "https://cursos.devtalles.com/"
    },
    {
        "Texto visible": "Pasar al contenido principal\nmenu\nEDUCACIÓN\nINVESTIGACIÓN\nVINCULACIÓN\nCONÓCENOS\nMÁS\nES | EN\nmi\ntec\nsearch\nInicio\nYour browser does not support HTML video.\nAdmisiones y Becas\nkeyboard_arrow_down\nEducación\nkeyboard_arrow_down\nInvestigación\nkeyboard_arrow_down\nFacultad\nkeyboard_arrow_down\nNoticias\nCONECTA\nModelo educativo: adquirir competencias en el mundo real\nTECSCIENCE\nObesidad en México: las investigaciones que podrían cambiar el futuro\nCONECTA\nIA será muy útil en la educación: creador de Khan Academy\nTECSCIENCE\nLo que saben las personas migrantes (y el resto del mundo necesita escuchar)\nEducación\nAdmisiones y Oferta educativa\nEn el Tec de Monterrey innovamos continuamente nuestra oferta académica para que siempre responda a los cambios sociales, económicos, laborales, científicos y tecnológicos.\nradio_button_unchecked\nPrepaTec\nSi tu interés es profundizar en el conocimiento, fortalecer tu visión del mundo deseas adquirir o fortalecer el dominio del inglés como segunda lengua PrepaTec es tu mejor opción.\nConstruye tu futuro HOY\nrecent_actors Admisiónkeyboard_arrow_right\naccount_balance_wallet Becaskeyboard_arrow_right\nvertical_split Programas Académicoskeyboard_arrow_right\nConoce más\nradio_button_unchecked\nProfesional\nTus profesores te retarán continua y deliberadamente a plantear y resolver problemas. Ya no más materias como las conocías, con conocimientos no necesariamente conectados entre sí. Retos continuos en entornos diversos para forjar en ti la persona que estás llamada a ser.\nVivir el Tec\nrecent_actors Admisiónkeyboard_arrow_right\naccount_balance_wallet Becas y Préstamos Educativoskeyboard_arrow_right\nvertical_split Oferta educativakeyboard_arrow_right\nConoce más\nradio_button_unchecked\nMaestrías y Diplomados\nEspecialízate con el más alto nivel académico y conviértete en un líder. Maestrías y doctorados en diferentes áreas. Te invitamos a conocer el programa ideal para ti.\nPlanea tu futuro\nvertical_split Maestrías y Diplomadoskeyboard_arrow_right\nvertical_split Posgradoskeyboard_arrow_right\nNuestros programas de Educación Continua están diseñados para prepararte ante los retos del mercado actual. Te invitamos a conocer el proceso de admisión y encontrar el programa ideal para ti.\nvertical_split Educación Continuakeyboard_arrow_right\nConoce más\nradio_button_unchecked\nModelo que te desafía\nDesde el primer semestre participarás en actividades que desarrollarán tu capacidad para identificar oportunidades, buscar recursos y asumir riesgos. Además, el modelo te empodera para que tomes gradualmente más decisiones sobre tu trayectoria universitaria a fin de desarrollar un perfil único.\nUn valor agregado, es que nuestro modelo educativo acompaña a todos los estudiantes desde un inicio, para lograr su plenitud tanto física, mental y emocional.\nConoce máskeyboard_arrow_right\nExperiencias\nVida en campus\nPasión por la lectura\nConoce nuestros Campus\nDale un vistazo a las instalaciones\nESCUELAS\nkeyboard_arrow_down\nCAMPUS\nkeyboard_arrow_down\nkeyboard_arrow_left\nkeyboard_arrow_right\n1 / 4\nCampus\nLaguna\nCoahuila\nGALERÍA\ninsert_photo\nDRONE\nondemand_video\nSITIO WEB\nlink\nSTREET VIEW\nbusiness\nInvestigación\nProfesores Investigadores\nLa ciencia con soluciones accionables\nVinculación\nFlorecimiento Humano\nCentro de Dignidad Humana\nServicio Social\nDiversidad e Inclusión\nRuta Azul\nGenerosidad\nSitios de interés\nkeyboard_arrow_left\nkeyboard_arrow_right\nEducación\nPREPATEC\nPROFESIONAL\nPOSGRADOS\nInvestigación\nGRUPOS\nINVESTIGADORES\nVinculación\nGENEROSIDAD\nFLORECIMIENTO HUMANO\nConócenos\nProfesores\nEgresados\nNoticias\nÚnete A Nosotros\nTEC STORE\nVENUES\nCENTRO DE PRENSA\nSÍGUENOS\nCONTÁCTANOS\nACCEDE A LOS PORTALES MITEC\nCAMBIAR IDIOMA\nES | EN\nMIEMBRO DE:\nAV. EUGENIO GARZA SADA 2501 COL. TECNOLÓGICO C.P. 64700 | MONTERREY, NUEVO LEÓN, MÉXICO | TEL. +52 (81) 8358-2000 D.R.© INSTITUTO TECNOLÓGICO Y DE ESTUDIOS SUPERIORES DE MONTERREY, MÉXICO. 2025\n*DEC-520912 PROGRAMAS EN MODALIDAD ESCOLARIZADA.\nAVISO LEGAL POLÍTICAS DE PRIVACIDAD AVISO DE PRIVACIDAD SOBRE EL SITIO",
        "URL actual": "https://tec.mx/es"
    },
    {
        "Texto visible": "Skip to content\nNavigation Menu\nProduct\nSolutions\nResources\nOpen Source\nEnterprise\nPricing\nSign in\nSign up\nDismiss alert\nmodelcontextprotocol\n/\npython-sdk\nPublic\nNotifications You must be signed in to change notification settings\nFork 1.3k\nStar 11.4k\nYou must be signed in to change notification settings\nCode\nIssues\n202\nPull requests\n81\nActions\nProjects\nSecurity\nInsights\nAdditional navigation options\nmodelcontextprotocol/python-sdk\n main\n23 Branches\n23 Tags\nCode\nFolders and files\nName Last commit message Last commit date\nLatest commit\nihrpr\nSSE FastMCP - do not go though auth when it's not needed (#619)\n3 days ago\n58c5e72\n · 3 days ago\nMay 2, 2025\nHistory\n411 Commits\n.github\nfix publish-pypi\n2 months agoMar 27, 2025\ndocs\nAdd mkdocs (#367)\n2 months agoMar 25, 2025\nexamples\nHandle SSE Disconnects Properly (#612)\n3 days agoMay 2, 2025\nsrc/mcp\nSSE FastMCP - do not go though auth when it's not needed (\n3 days agoMay 2, 2025\ntests\nSSE FastMCP - do not go though auth when it's not needed (\n3 days agoMay 2, 2025\n.git-blame-ignore-revs\nAdded ignore revs (for gitlense)\n3 months agoFeb 13, 2025\n.gitignore\nAdd support for serverside oauth (#255)\n4 days agoMay 1, 2025\n.pre-commit-config.yaml\nMatch ruff version on CI and local (#471)\nlast monthApr 10, 2025\nCLAUDE.md\nAdd support for serverside oauth (#255)\n4 days agoMay 1, 2025\nCODE_OF_CONDUCT.md\nAdd code of conduct\n6 months agoNov 18, 2024\nCONTRIBUTING.md\ndocs: Add branch selection guidance to CONTRIBUTING.md\n4 months agoJan 3, 2025\nLICENSE\nUpdate LICENSE\n6 months agoNov 18, 2024\nREADME.md\nAdd support for serverside oauth (#255)\n4 days agoMay 1, 2025\nRELEASE.md\nRelease on GitHub release (#276)\n2 months agoMar 13, 2025\nSECURITY.md\nUpdate SECURITY.md\n6 months agoNov 19, 2024\nmkdocs.yml\nset site url\n2 months agoMar 27, 2025\npyproject.toml\nAdd support for serverside oauth (#255)\n4 days agoMay 1, 2025\nuv.lock\nStreamableHttp client transport (#573)\n3 days agoMay 2, 2025\nRepository files navigation\nREADME\nCode of conduct\nMIT license\nSecurity\nMCP Python SDK\nPython implementation of the Model Context Protocol (MCP)\nTable of Contents\nMCP Python SDK\nOverview\nInstallation\nAdding MCP to your python project\nRunning the standalone MCP development tools\nQuickstart\nWhat is MCP?\nCore Concepts\nServer\nResources\nTools\nPrompts\nImages\nContext\nRunning Your Server\nDevelopment Mode\nClaude Desktop Integration\nDirect Execution\nMounting to an Existing ASGI Server\nExamples\nEcho Server\nSQLite Explorer\nAdvanced Usage\nLow-Level Server\nWriting MCP Clients\nMCP Primitives\nServer Capabilities\nDocumentation\nContributing\nLicense\nOverview\nThe Model Context Protocol allows applications to provide context for LLMs in a standardized way, separating the concerns of providing context from the actual LLM interaction. This Python SDK implements the full MCP specification, making it easy to:\nBuild MCP clients that can connect to any MCP server\nCreate MCP servers that expose resources, prompts and tools\nUse standard transports like stdio and SSE\nHandle all MCP protocol messages and lifecycle events\nInstallation\nAdding MCP to your python project\nWe recommend using uv to manage your Python projects.\nIf you haven't created a uv-managed project yet, create one:\nuv init mcp-server-demo\ncd mcp-server-demo\nThen add MCP to your project dependencies:\nuv add \"mcp[cli]\"\nAlternatively, for projects using pip for dependencies:\npip install \"mcp[cli]\"\nRunning the standalone MCP development tools\nTo run the mcp command with uv:\nuv run mcp\nQuickstart\nLet's create a simple MCP server that exposes a calculator tool and some data:\n# server.py\nfrom mcp.server.fastmcp import FastMCP\n\n# Create an MCP server\nmcp = FastMCP(\"Demo\")\n\n\n# Add an addition tool\n@mcp.tool()\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\n\n# Add a dynamic greeting resource\n@mcp.resource(\"greeting://{name}\")\ndef get_greeting(name: str) -> str:\n    \"\"\"Get a personalized greeting\"\"\"\n    return f\"Hello, {name}!\"\nYou can install this server in Claude Desktop and interact with it right away by running:\nmcp install server.py\nAlternatively, you can test it with the MCP Inspector:\nmcp dev server.py\nWhat is MCP?\nThe Model Context Protocol (MCP) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:\nExpose data through Resources (think of these sort of like GET endpoints; they are used to load information into the LLM's context)\nProvide functionality through Tools (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)\nDefine interaction patterns through Prompts (reusable templates for LLM interactions)\nAnd more!\nCore Concepts\nServer\nThe FastMCP server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:\n# Add lifespan support for startup/shutdown with strong typing\nfrom contextlib import asynccontextmanager\nfrom collections.abc import AsyncIterator\nfrom dataclasses import dataclass\n\nfrom fake_database import Database  # Replace with your actual DB type\n\nfrom mcp.server.fastmcp import Context, FastMCP\n\n# Create a named server\nmcp = FastMCP(\"My App\")\n\n# Specify dependencies for deployment and development\nmcp = FastMCP(\"My App\", dependencies=[\"pandas\", \"numpy\"])\n\n\n@dataclass\nclass AppContext:\n    db: Database\n\n\n@asynccontextmanager\nasync def app_lifespan(server: FastMCP) -> AsyncIterator[AppContext]:\n    \"\"\"Manage application lifecycle with type-safe context\"\"\"\n    # Initialize on startup\n    db = await Database.connect()\n    try:\n        yield AppContext(db=db)\n    finally:\n        # Cleanup on shutdown\n        await db.disconnect()\n\n\n# Pass lifespan to server\nmcp = FastMCP(\"My App\", lifespan=app_lifespan)\n\n\n# Access type-safe lifespan context in tools\n@mcp.tool()\ndef query_db(ctx: Context) -> str:\n    \"\"\"Tool that uses initialized resources\"\"\"\n    db = ctx.request_context.lifespan_context.db\n    return db.query()\nResources\nResources are how you expose data to LLMs. They're similar to GET endpoints in a REST API - they provide data but shouldn't perform significant computation or have side effects:\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.resource(\"config://app\")\ndef get_config() -> str:\n    \"\"\"Static configuration data\"\"\"\n    return \"App configuration here\"\n\n\n@mcp.resource(\"users://{user_id}/profile\")\ndef get_user_profile(user_id: str) -> str:\n    \"\"\"Dynamic user data\"\"\"\n    return f\"Profile data for user {user_id}\"\nTools\nTools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects:\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.tool()\ndef calculate_bmi(weight_kg: float, height_m: float) -> float:\n    \"\"\"Calculate BMI given weight in kg and height in meters\"\"\"\n    return weight_kg / (height_m**2)\n\n\n@mcp.tool()\nasync def fetch_weather(city: str) -> str:\n    \"\"\"Fetch current weather for a city\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.weather.com/{city}\")\n        return response.text\nPrompts\nPrompts are reusable templates that help LLMs interact with your server effectively:\nfrom mcp.server.fastmcp import FastMCP\nfrom mcp.server.fastmcp.prompts import base\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.prompt()\ndef review_code(code: str) -> str:\n    return f\"Please review this code:\\n\\n{code}\"\n\n\n@mcp.prompt()\ndef debug_error(error: str) -> list[base.Message]:\n    return [\n        base.UserMessage(\"I'm seeing this error:\"),\n        base.UserMessage(error),\n        base.AssistantMessage(\"I'll help debug that. What have you tried so far?\"),\n    ]\nImages\nFastMCP provides an Image class that automatically handles image data:\nfrom mcp.server.fastmcp import FastMCP, Image\nfrom PIL import Image as PILImage\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.tool()\ndef create_thumbnail(image_path: str) -> Image:\n    \"\"\"Create a thumbnail from an image\"\"\"\n    img = PILImage.open(image_path)\n    img.thumbnail((100, 100))\n    return Image(data=img.tobytes(), format=\"png\")\nContext\nThe Context object gives your tools and resources access to MCP capabilities:\nfrom mcp.server.fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.tool()\nasync def long_task(files: list[str], ctx: Context) -> str:\n    \"\"\"Process multiple files with progress tracking\"\"\"\n    for i, file in enumerate(files):\n        ctx.info(f\"Processing {file}\")\n        await ctx.report_progress(i, len(files))\n        data, mime_type = await ctx.read_resource(f\"file://{file}\")\n    return \"Processing complete\"\nAuthentication\nAuthentication can be used by servers that want to expose tools accessing protected resources.\nmcp.server.auth implements an OAuth 2.0 server interface, which servers can use by providing an implementation of the OAuthServerProvider protocol.\nmcp = FastMCP(\"My App\",\n        auth_provider=MyOAuthServerProvider(),\n        auth=AuthSettings(\n            issuer_url=\"https://myapp.com\",\n            revocation_options=RevocationOptions(\n                enabled=True,\n            ),\n            client_registration_options=ClientRegistrationOptions(\n                enabled=True,\n                valid_scopes=[\"myscope\", \"myotherscope\"],\n                default_scopes=[\"myscope\"],\n            ),\n            required_scopes=[\"myscope\"],\n        ),\n)\nSee OAuthServerProvider for more details.\nRunning Your Server\nDevelopment Mode\nThe fastest way to test and debug your server is with the MCP Inspector:\nmcp dev server.py\n\n# Add dependencies\nmcp dev server.py --with pandas --with numpy\n\n# Mount local code\nmcp dev server.py --with-editable .\nClaude Desktop Integration\nOnce your server is ready, install it in Claude Desktop:\nmcp install server.py\n\n# Custom name\nmcp install server.py --name \"My Analytics Server\"\n\n# Environment variables\nmcp install server.py -v API_KEY=abc123 -v DB_URL=postgres://...\nmcp install server.py -f .env\nDirect Execution\nFor advanced scenarios like custom deployments:\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"My App\")\n\nif __name__ == \"__main__\":\n    mcp.run()\nRun it with:\npython server.py\n# or\nmcp run server.py\nMounting to an Existing ASGI Server\nYou can mount the SSE server to an existing ASGI server using the sse_app method. This allows you to integrate the SSE server with other ASGI applications.\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount, Host\nfrom mcp.server.fastmcp import FastMCP\n\n\nmcp = FastMCP(\"My App\")\n\n# Mount the SSE server to the existing ASGI server\napp = Starlette(\n    routes=[\n        Mount('/', app=mcp.sse_app()),\n    ]\n)\n\n# or dynamically mount as host\napp.router.routes.append(Host('mcp.acme.corp', app=mcp.sse_app()))\nFor more information on mounting applications in Starlette, see the Starlette documentation.\nExamples\nEcho Server\nA simple server demonstrating resources, tools, and prompts:\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"Echo\")\n\n\n@mcp.resource(\"echo://{message}\")\ndef echo_resource(message: str) -> str:\n    \"\"\"Echo a message as a resource\"\"\"\n    return f\"Resource echo: {message}\"\n\n\n@mcp.tool()\ndef echo_tool(message: str) -> str:\n    \"\"\"Echo a message as a tool\"\"\"\n    return f\"Tool echo: {message}\"\n\n\n@mcp.prompt()\ndef echo_prompt(message: str) -> str:\n    \"\"\"Create an echo prompt\"\"\"\n    return f\"Please process this message: {message}\"\nSQLite Explorer\nA more complex example showing database integration:\nimport sqlite3\n\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"SQLite Explorer\")\n\n\n@mcp.resource(\"schema://main\")\ndef get_schema() -> str:\n    \"\"\"Provide the database schema as a resource\"\"\"\n    conn = sqlite3.connect(\"database.db\")\n    schema = conn.execute(\"SELECT sql FROM sqlite_master WHERE type='table'\").fetchall()\n    return \"\\n\".join(sql[0] for sql in schema if sql[0])\n\n\n@mcp.tool()\ndef query_data(sql: str) -> str:\n    \"\"\"Execute SQL queries safely\"\"\"\n    conn = sqlite3.connect(\"database.db\")\n    try:\n        result = conn.execute(sql).fetchall()\n        return \"\\n\".join(str(row) for row in result)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\nAdvanced Usage\nLow-Level Server\nFor more control, you can use the low-level server implementation directly. This gives you full access to the protocol and allows you to customize every aspect of your server, including lifecycle management through the lifespan API:\nfrom contextlib import asynccontextmanager\nfrom collections.abc import AsyncIterator\n\nfrom fake_database import Database  # Replace with your actual DB type\n\nfrom mcp.server import Server\n\n\n@asynccontextmanager\nasync def server_lifespan(server: Server) -> AsyncIterator[dict]:\n    \"\"\"Manage server startup and shutdown lifecycle.\"\"\"\n    # Initialize resources on startup\n    db = await Database.connect()\n    try:\n        yield {\"db\": db}\n    finally:\n        # Clean up on shutdown\n        await db.disconnect()\n\n\n# Pass lifespan to server\nserver = Server(\"example-server\", lifespan=server_lifespan)\n\n\n# Access lifespan context in handlers\n@server.call_tool()\nasync def query_db(name: str, arguments: dict) -> list:\n    ctx = server.request_context\n    db = ctx.lifespan_context[\"db\"]\n    return await db.query(arguments[\"query\"])\nThe lifespan API provides:\nA way to initialize resources when the server starts and clean them up when it stops\nAccess to initialized resources through the request context in handlers\nType-safe context passing between lifespan and request handlers\nimport mcp.server.stdio\nimport mcp.types as types\nfrom mcp.server.lowlevel import NotificationOptions, Server\nfrom mcp.server.models import InitializationOptions\n\n# Create a server instance\nserver = Server(\"example-server\")\n\n\n@server.list_prompts()\nasync def handle_list_prompts() -> list[types.Prompt]:\n    return [\n        types.Prompt(\n            name=\"example-prompt\",\n            description=\"An example prompt template\",\n            arguments=[\n                types.PromptArgument(\n                    name=\"arg1\", description=\"Example argument\", required=True\n                )\n            ],\n        )\n    ]\n\n\n@server.get_prompt()\nasync def handle_get_prompt(\n    name: str, arguments: dict[str, str] | None\n) -> types.GetPromptResult:\n    if name != \"example-prompt\":\n        raise ValueError(f\"Unknown prompt: {name}\")\n\n    return types.GetPromptResult(\n        description=\"Example prompt\",\n        messages=[\n            types.PromptMessage(\n                role=\"user\",\n                content=types.TextContent(type=\"text\", text=\"Example prompt text\"),\n            )\n        ],\n    )\n\n\nasync def run():\n    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):\n        await server.run(\n            read_stream,\n            write_stream,\n            InitializationOptions(\n                server_name=\"example\",\n                server_version=\"0.1.0\",\n                capabilities=server.get_capabilities(\n                    notification_options=NotificationOptions(),\n                    experimental_capabilities={},\n                ),\n            ),\n        )\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(run())\nWriting MCP Clients\nThe SDK provides a high-level client interface for connecting to MCP servers:\nfrom mcp import ClientSession, StdioServerParameters, types\nfrom mcp.client.stdio import stdio_client\n\n# Create server parameters for stdio connection\nserver_params = StdioServerParameters(\n    command=\"python\",  # Executable\n    args=[\"example_server.py\"],  # Optional command line arguments\n    env=None,  # Optional environment variables\n)\n\n\n# Optional: create a sampling callback\nasync def handle_sampling_message(\n    message: types.CreateMessageRequestParams,\n) -> types.CreateMessageResult:\n    return types.CreateMessageResult(\n        role=\"assistant\",\n        content=types.TextContent(\n            type=\"text\",\n            text=\"Hello, world! from model\",\n        ),\n        model=\"gpt-3.5-turbo\",\n        stopReason=\"endTurn\",\n    )\n\n\nasync def run():\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(\n            read, write, sampling_callback=handle_sampling_message\n        ) as session:\n            # Initialize the connection\n            await session.initialize()\n\n            # List available prompts\n            prompts = await session.list_prompts()\n\n            # Get a prompt\n            prompt = await session.get_prompt(\n                \"example-prompt\", arguments={\"arg1\": \"value\"}\n            )\n\n            # List available resources\n            resources = await session.list_resources()\n\n            # List available tools\n            tools = await session.list_tools()\n\n            # Read a resource\n            content, mime_type = await session.read_resource(\"file://some/path\")\n\n            # Call a tool\n            result = await session.call_tool(\"tool-name\", arguments={\"arg1\": \"value\"})\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(run())\nMCP Primitives\nThe MCP protocol defines three core primitives that servers can implement:\nPrimitive Control Description Example Use\nPrompts User-controlled Interactive templates invoked by user choice Slash commands, menu options\nResources Application-controlled Contextual data managed by the client application File contents, API responses\nTools Model-controlled Functions exposed to the LLM to take actions API calls, data updates\nServer Capabilities\nMCP servers declare capabilities during initialization:\nCapability Feature Flag Description\nprompts listChanged Prompt template management\nresources subscribe\nlistChanged Resource exposure and updates\ntools listChanged Tool discovery and execution\nlogging - Server logging configuration\ncompletion - Argument completion suggestions\nDocumentation\nModel Context Protocol documentation\nModel Context Protocol specification\nOfficially supported servers\nContributing\nWe are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the contributing guide to get started.\nLicense\nThis project is licensed under the MIT License - see the LICENSE file for details.\nAbout\nThe official Python SDK for Model Context Protocol servers and clients\nmodelcontextprotocol.io\nResources\nReadme\nLicense\nMIT license\nCode of conduct\nCode of conduct\nSecurity policy\nSecurity policy\nActivity\nCustom properties\nStars\n11.4k stars\nWatchers\n98 watching\nForks\n1.3k forks\nReport repository\nReleases 17\nv1.7.1\nLatest\n3 days agoMay 2, 2025\n+ 16 releases\nContributors\n53\n+ 39 contributors\nLanguages\nPython\n100.0%\nFooter\n© 2025 GitHub, Inc.\nFooter navigation\nTerms\nPrivacy\nSecurity\nStatus\nDocs\nContact\nManage cookies\nDo not share my personal information",
        "URL actual": "https://github.com/modelcontextprotocol/python-sdk"
    },
    {
        "Texto visible": "stackoverflow.com\nVerify you are human by completing the action below.\nstackoverflow.com needs to review the security of your connection before proceeding.\nRay ID: 93b1c2181b34c18e\nPerformance & security by Cloudflare",
        "URL actual": "https://stackoverflow.com/questions/30328028/while-using-casefold-i-am-getting-an-error-as-attributeerror-str-object"
    },
    {
        "Texto visible": "Markdown Guide\nGet Started\nCheat Sheet\nBasic Syntax\nExtended Syntax\nHacks\nTools\nBook\nBasic Syntax\nThe Markdown elements outlined in the original design document.\nOverview\nNearly all Markdown applications support the basic syntax outlined in the original Markdown design document. There are minor variations and discrepancies between Markdown processors — those are noted inline wherever possible.\nHeadings\nTo create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level. For example, to create a heading level three (<h3>), use three number signs (e.g., ### My Header).\nMarkdown HTML Rendered Output\n# Heading level 1 <h1>Heading level 1</h1>\nHeading level 1\n## Heading level 2 <h2>Heading level 2</h2>\nHeading level 2\n### Heading level 3 <h3>Heading level 3</h3>\nHeading level 3\n#### Heading level 4 <h4>Heading level 4</h4>\nHeading level 4\n##### Heading level 5 <h5>Heading level 5</h5>\nHeading level 5\n###### Heading level 6 <h6>Heading level 6</h6>\nHeading level 6\nAlternate Syntax\nAlternatively, on the line below the text, add any number of == characters for heading level 1 or -- characters for heading level 2.\nMarkdown HTML Rendered Output\nHeading level 1\n=============== <h1>Heading level 1</h1>\nHeading level 1\nHeading level 2\n--------------- <h2>Heading level 2</h2>\nHeading level 2\nHeading Best Practices\nMarkdown applications don’t agree on how to handle a missing space between the number signs (#) and the heading name. For compatibility, always put a space between the number signs and the heading name.\n✅  Do this ❌  Don't do this\n# Here's a Heading\n\n#Here's a Heading\nYou should also put blank lines before and after a heading for compatibility.\n✅  Do this ❌  Don't do this\nTry to put a blank line before...\n\n# Heading\n\n...and after a heading. Without blank lines, this might not look right.\n# Heading\nDon't do this!\nParagraphs\nTo create paragraphs, use a blank line to separate one or more lines of text.\nMarkdown HTML Rendered Output\nI really like using Markdown.\n\nI think I'll use it to format all of my documents from now on. <p>I really like using Markdown.</p>\n\n<p>I think I'll use it to format all of my documents from now on.</p>\nI really like using Markdown.\nI think I'll use it to format all of my documents from now on.\nParagraph Best Practices\nUnless the paragraph is in a list, don’t indent paragraphs with spaces or tabs.\nNote: If you need to indent paragraphs in the output, see the section on how to indent (tab).\n✅  Do this ❌  Don't do this\nDon't put tabs or spaces in front of your paragraphs.\n\nKeep lines left-aligned like this.\n\n    This can result in unexpected formatting problems.\n\n  Don't add tabs or spaces in front of paragraphs.\nLine Breaks\nTo create a line break or new line (<br>), end a line with two or more spaces, and then type return.\nMarkdown HTML Rendered Output\nThis is the first line.  \nAnd this is the second line. <p>This is the first line.<br>\nAnd this is the second line.</p>\nThis is the first line.\nAnd this is the second line.\nLine Break Best Practices\nYou can use two or more spaces (commonly referred to as “trailing whitespace”) for line breaks in nearly every Markdown application, but it’s controversial. It’s hard to see trailing whitespace in an editor, and many people accidentally or intentionally put two spaces after every sentence. For this reason, you may want to use something other than trailing whitespace for line breaks. If your Markdown application supports HTML, you can use the <br> HTML tag.\nFor compatibility, use trailing white space or the <br> HTML tag at the end of the line.\nThere are two other options I don’t recommend using. CommonMark and a few other lightweight markup languages let you type a backslash (\\) at the end of the line, but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. And at least a couple lightweight markup languages don’t require anything at the end of the line — just type return and they’ll create a line break.\n✅  Do this ❌  Don't do this\nFirst line with two spaces after.  \nAnd the next line.\n\nFirst line with the HTML tag after.<br>\nAnd the next line.\n\nFirst line with a backslash after.\\\nAnd the next line.\n\nFirst line with nothing after.\nAnd the next line.\n\nEmphasis\nYou can add emphasis by making text bold or italic.\nBold\nTo bold text, add two asterisks or underscores before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters.\nMarkdown HTML Rendered Output\nI just love **bold text**. I just love <strong>bold text</strong>. I just love bold text.\nI just love __bold text__. I just love <strong>bold text</strong>. I just love bold text.\nLove**is**bold Love<strong>is</strong>bold Loveisbold\nBold Best Practices\nMarkdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold the middle of a word for emphasis.\n✅  Do this ❌  Don't do this\nLove**is**bold Love__is__bold\nItalic\nTo italicize text, add one asterisk or underscore before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters.\nMarkdown HTML Rendered Output\nItalicized text is the *cat's meow*. Italicized text is the <em>cat's meow</em>. Italicized text is the cat’s meow.\nItalicized text is the _cat's meow_. Italicized text is the <em>cat's meow</em>. Italicized text is the cat’s meow.\nA*cat*meow A<em>cat</em>meow Acatmeow\nItalic Best Practices\nMarkdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to italicize the middle of a word for emphasis.\n✅  Do this ❌  Don't do this\nA*cat*meow A_cat_meow\nBold and Italic\nTo emphasize text with bold and italics at the same time, add three asterisks or underscores before and after a word or phrase. To bold and italicize the middle of a word for emphasis, add three asterisks without spaces around the letters.\nMarkdown HTML Rendered Output\nThis text is ***really important***. This text is <em><strong>really important</strong></em>. This text is really important.\nThis text is ___really important___. This text is <em><strong>really important</strong></em>. This text is really important.\nThis text is __*really important*__. This text is <em><strong>really important</strong></em>. This text is really important.\nThis text is **_really important_**. This text is <em><strong>really important</strong></em>. This text is really important.\nThis is really***very***important text. This is really<em><strong>very</strong></em>important text. This is reallyveryimportant text.\nNote: The order of the em and strong tags might be reversed depending on the Markdown processor you're using.\nBold and Italic Best Practices\nMarkdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold and italicize the middle of a word for emphasis.\n✅  Do this ❌  Don't do this\nThis is really***very***important text. This is really___very___important text.\nBlockquotes\nTo create a blockquote, add a > in front of a paragraph.\n> Dorothy followed her through many of the beautiful rooms in her castle.\nThe rendered output looks like this:\nDorothy followed her through many of the beautiful rooms in her castle.\nBlockquotes with Multiple Paragraphs\nBlockquotes can contain multiple paragraphs. Add a > on the blank lines between the paragraphs.\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\nThe rendered output looks like this:\nDorothy followed her through many of the beautiful rooms in her castle.\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\nNested Blockquotes\nBlockquotes can be nested. Add a >> in front of the paragraph you want to nest.\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\nThe rendered output looks like this:\nDorothy followed her through many of the beautiful rooms in her castle.\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\nBlockquotes with Other Elements\nBlockquotes can contain other Markdown formatted elements. Not all elements can be used — you’ll need to experiment to see which ones work.\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n>  *Everything* is going according to **plan**.\nThe rendered output looks like this:\nThe quarterly results look great!\nRevenue was off the chart.\nProfits were higher than ever.\nEverything is going according to plan.\nBlockquotes Best Practices\nFor compatibility, put blank lines before and after blockquotes.\n✅  Do this ❌  Don't do this\nTry to put a blank line before...\n\n> This is a blockquote\n\n...and after a blockquote. Without blank lines, this might not look right.\n> This is a blockquote\nDon't do this!\nLists\nYou can organize items into ordered and unordered lists.\nOrdered Lists\nTo create an ordered list, add line items with numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.\nMarkdown HTML Rendered Output\n1. First item\n2. Second item\n3. Third item\n4. Fourth item <ol>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n  <li>Fourth item</li>\n</ol>\nFirst item\nSecond item\nThird item\nFourth item\n1. First item\n1. Second item\n1. Third item\n1. Fourth item <ol>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n  <li>Fourth item</li>\n</ol>\nFirst item\nSecond item\nThird item\nFourth item\n1. First item\n8. Second item\n3. Third item\n5. Fourth item <ol>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n  <li>Fourth item</li>\n</ol>\nFirst item\nSecond item\nThird item\nFourth item\n1. First item\n2. Second item\n3. Third item\n    1. Indented item\n    2. Indented item\n4. Fourth item <ol>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item\n    <ol>\n      <li>Indented item</li>\n      <li>Indented item</li>\n    </ol>\n  </li>\n  <li>Fourth item</li>\n</ol>\nFirst item\nSecond item\nThird item\nIndented item\nIndented item\nFourth item\nOrdered List Best Practices\nCommonMark and a few other lightweight markup languages let you use a parenthesis ()) as a delimiter (e.g., 1) First item), but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. For compatibility, use periods only.\n✅  Do this ❌  Don't do this\n1. First item\n2. Second item 1) First item\n2) Second item\nUnordered Lists\nTo create an unordered list, add dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.\nMarkdown HTML Rendered Output\n- First item\n- Second item\n- Third item\n- Fourth item <ul>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n  <li>Fourth item</li>\n</ul>\nFirst item\nSecond item\nThird item\nFourth item\n* First item\n* Second item\n* Third item\n* Fourth item <ul>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n  <li>Fourth item</li>\n</ul>\nFirst item\nSecond item\nThird item\nFourth item\n+ First item\n+ Second item\n+ Third item\n+ Fourth item <ul>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item</li>\n  <li>Fourth item</li>\n</ul>\nFirst item\nSecond item\nThird item\nFourth item\n- First item\n- Second item\n- Third item\n    - Indented item\n    - Indented item\n- Fourth item <ul>\n  <li>First item</li>\n  <li>Second item</li>\n  <li>Third item\n    <ul>\n      <li>Indented item</li>\n      <li>Indented item</li>\n    </ul>\n  </li>\n  <li>Fourth item</li>\n</ul>\nFirst item\nSecond item\nThird item\nIndented item\nIndented item\nFourth item\nStarting Unordered List Items With Numbers\nIf you need to start an unordered list item with a number followed by a period, you can use a backslash (\\) to escape the period.\nMarkdown HTML Rendered Output\n- 1968\\. A great year!\n- I think 1969 was second best. <ul>\n  <li>1968. A great year!</li>\n  <li>I think 1969 was second best.</li>\n</ul>\n1968. A great year!\nI think 1969 was second best.\nUnordered List Best Practices\nMarkdown applications don’t agree on how to handle different delimiters in the same list. For compatibility, don’t mix and match delimiters in the same list — pick one and stick with it.\n✅  Do this ❌  Don't do this\n- First item\n- Second item\n- Third item\n- Fourth item + First item\n* Second item\n- Third item\n+ Fourth item\nAdding Elements in Lists\nTo add another element in a list while preserving the continuity of the list, indent the element four spaces or one tab, as shown in the following examples.\nTip: If things don't appear the way you expect, double check that you've indented the elements in the list four spaces or one tab.\nParagraphs\n* This is the first list item.\n* Here's the second list item.\n\n    I need to add another paragraph below the second list item.\n\n* And here's the third list item.\nThe rendered output looks like this:\nThis is the first list item.\nHere’s the second list item.\nI need to add another paragraph below the second list item.\nAnd here’s the third list item.\nBlockquotes\n* This is the first list item.\n* Here's the second list item.\n\n    > A blockquote would look great below the second list item.\n\n* And here's the third list item.\nThe rendered output looks like this:\nThis is the first list item.\nHere’s the second list item.\nA blockquote would look great below the second list item.\nAnd here’s the third list item.\nCode Blocks\nCode blocks are normally indented four spaces or one tab. When they’re in a list, indent them eight spaces or two tabs.\n1. Open the file.\n2. Find the following code block on line 21:\n\n        <html>\n          <head>\n            <title>Test</title>\n          </head>\n\n3. Update the title to match the name of your website.\nThe rendered output looks like this:\nOpen the file.\nFind the following code block on line 21:\n <html>\n   <head>\n     <title>Test</title>\n   </head>\nUpdate the title to match the name of your website.\nImages\n1. Open the file containing the Linux mascot.\n2. Marvel at its beauty.\n\n    ![Tux, the Linux mascot](/assets/images/tux.png)\n\n3. Close the file.\nThe rendered output looks like this:\nOpen the file containing the Linux mascot.\nMarvel at its beauty.\nClose the file.\nLists\nYou can nest an unordered list in an ordered list, or vice versa.\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\nThe rendered output looks like this:\nFirst item\nSecond item\nThird item\nIndented item\nIndented item\nFourth item\nCode\nTo denote a word or phrase as code, enclose it in backticks (`).\nMarkdown HTML Rendered Output\nAt the command prompt, type `nano`. At the command prompt, type <code>nano</code>. At the command prompt, type nano.\nEscaping Backticks\nIf the word or phrase you want to denote as code includes one or more backticks, you can escape it by enclosing the word or phrase in double backticks (``).\nMarkdown HTML Rendered Output\n``Use `code` in your Markdown file.`` <code>Use `code` in your Markdown file.</code> Use `code` in your Markdown file.\nCode Blocks\nTo create code blocks, indent every line of the block by at least four spaces or one tab.\n    <html>\n      <head>\n      </head>\n    </html>\nThe rendered output looks like this:\n<html>\n  <head>\n  </head>\n</html>\nNote: To create code blocks without indenting lines, use fenced code blocks.\nHorizontal Rules\nTo create a horizontal rule, use three or more asterisks (***), dashes (---), or underscores (___) on a line by themselves.\n***\n\n---\n\n_________________\nThe rendered output of all three looks identical:\nHorizontal Rule Best Practices\nFor compatibility, put blank lines before and after horizontal rules.\n✅  Do this ❌  Don't do this\nTry to put a blank line before...\n\n---\n\n...and after a horizontal rule. Without blank lines, this would be a heading.\n---\nDon't do this!\nLinks\nTo create a link, enclose the link text in brackets (e.g., [Duck Duck Go]) and then follow it immediately with the URL in parentheses (e.g., (https://duckduckgo.com)).\nMy favorite search engine is [Duck Duck Go](https://duckduckgo.com).\nThe rendered output looks like this:\nMy favorite search engine is Duck Duck Go.\nNote: To link to an element on the same page, see linking to heading IDs. To create a link that opens in a new tab or window, see the section on link targets.\nAdding Titles\nYou can optionally add a title for a link. This will appear as a tooltip when the user hovers over the link. To add a title, enclose it in quotation marks after the URL.\nMy favorite search engine is [Duck Duck Go](https://duckduckgo.com \"The best search engine for privacy\").\nThe rendered output looks like this:\nMy favorite search engine is Duck Duck Go.\nURLs and Email Addresses\nTo quickly turn a URL or email address into a link, enclose it in angle brackets.\n<https://www.markdownguide.org>\n<fake@example.com>\nThe rendered output looks like this:\nhttps://www.markdownguide.org\nfake@example.com\nFormatting Links\nTo emphasize links, add asterisks before and after the brackets and parentheses. To denote links as code, add backticks in the brackets.\nI love supporting the **[EFF](https://eff.org)**.\nThis is the *[Markdown Guide](https://www.markdownguide.org)*.\nSee the section on [`code`](#code).\nThe rendered output looks like this:\nI love supporting the EFF.\nThis is the Markdown Guide.\nSee the section on code.\nReference-style Links\nReference-style links are a special kind of link that make URLs easier to display and read in Markdown. Reference-style links are constructed in two parts: the part you keep inline with your text and the part you store somewhere else in the file to keep the text easy to read.\nFormatting the First Part of the Link\nThe first part of a reference-style link is formatted with two sets of brackets. The first set of brackets surrounds the text that should appear linked. The second set of brackets displays a label used to point to the link you’re storing elsewhere in your document.\nAlthough not required, you can include a space between the first and second set of brackets. The label in the second set of brackets is not case sensitive and can include letters, numbers, spaces, or punctuation.\nThis means the following example formats are roughly equivalent for the first part of the link:\n[hobbit-hole][1]\n[hobbit-hole] [1]\nFormatting the Second Part of the Link\nThe second part of a reference-style link is formatted with the following attributes:\nThe label, in brackets, followed immediately by a colon and at least one space (e.g., [label]: ).\nThe URL for the link, which you can optionally enclose in angle brackets.\nThe optional title for the link, which you can enclose in double quotes, single quotes, or parentheses.\nThis means the following example formats are all roughly equivalent for the second part of the link:\n[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle\n[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle \"Hobbit lifestyles\"\n[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle 'Hobbit lifestyles'\n[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)\n[1]: <https://en.wikipedia.org/wiki/Hobbit#Lifestyle> \"Hobbit lifestyles\"\n[1]: <https://en.wikipedia.org/wiki/Hobbit#Lifestyle> 'Hobbit lifestyles'\n[1]: <https://en.wikipedia.org/wiki/Hobbit#Lifestyle> (Hobbit lifestyles)\nYou can place this second part of the link anywhere in your Markdown document. Some people place them immediately after the paragraph in which they appear while other people place them at the end of the document (like endnotes or footnotes).\nAn Example Putting the Parts Together\nSay you add a URL as a standard URL link to a paragraph and it looks like this in Markdown:\nIn a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends\nof worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to\neat: it was a [hobbit-hole](https://en.wikipedia.org/wiki/Hobbit#Lifestyle \"Hobbit lifestyles\"), and that means comfort.\nThough it may point to interesting additional information, the URL as displayed really doesn’t add much to the existing raw text other than making it harder to read. To fix that, you could format the URL like this instead:\nIn a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends\nof worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to\neat: it was a [hobbit-hole][1], and that means comfort.\n\n[1]: <https://en.wikipedia.org/wiki/Hobbit#Lifestyle> \"Hobbit lifestyles\"\nIn both instances above, the rendered output would be identical:\nIn a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends of worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to eat: it was a hobbit-hole, and that means comfort.\nand the HTML for the link would be:\n<a href=\"https://en.wikipedia.org/wiki/Hobbit#Lifestyle\" title=\"Hobbit lifestyles\">hobbit-hole</a>\nLink Best Practices\nMarkdown applications don’t agree on how to handle spaces in the middle of a URL. For compatibility, try to URL encode any spaces with %20. Alternatively, if your Markdown application supports HTML, you could use the a HTML tag.\n✅  Do this ❌  Don't do this\n[link](https://www.example.com/my%20great%20page)\n\n<a href=\"https://www.example.com/my great page\">link</a>\n\n[link](https://www.example.com/my great page)\n\nParentheses in the middle of a URL can also be problematic. For compatibility, try to URL encode the opening parenthesis (() with %28 and the closing parenthesis ()) with %29. Alternatively, if your Markdown application supports HTML, you could use the a HTML tag.\n✅  Do this ❌  Don't do this\n[a novel](https://en.wikipedia.org/wiki/The_Milagro_Beanfield_War_%28novel%29)\n\n<a href=\"https://en.wikipedia.org/wiki/The_Milagro_Beanfield_War_(novel)\">a novel</a>\n\n[a novel](https://en.wikipedia.org/wiki/The_Milagro_Beanfield_War_(novel))\nImages\nTo add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title in quotation marks after the path or URL.\n![The San Juan Mountains are beautiful!](/assets/images/san-juan-mountains.jpg \"San Juan Mountains\")\nThe rendered output looks like this:\nNote: To resize an image, see the section on image size. To add a caption, see the section on image captions.\nLinking Images\nTo add a link to an image, enclose the Markdown for the image in brackets, and then add the link in parentheses.\n[![An old rock in the desert](/assets/images/shiprock.jpg \"Shiprock, New Mexico by Beau Rogers\")](https://www.flickr.com/photos/beaurogers/31833779864/in/photolist-Qv3rFw-34mt9F-a9Cmfy-5Ha3Zi-9msKdv-o3hgjr-hWpUte-4WMsJ1-KUQ8N-deshUb-vssBD-6CQci6-8AFCiD-zsJWT-nNfsgB-dPDwZJ-bn9JGn-5HtSXY-6CUhAL-a4UTXB-ugPum-KUPSo-fBLNm-6CUmpy-4WMsc9-8a7D3T-83KJev-6CQ2bK-nNusHJ-a78rQH-nw3NvT-7aq2qf-8wwBso-3nNceh-ugSKP-4mh4kh-bbeeqH-a7biME-q3PtTf-brFpgb-cg38zw-bXMZc-nJPELD-f58Lmo-bXMYG-bz8AAi-bxNtNT-bXMYi-bXMY6-bXMYv)\nThe rendered output looks like this:\nEscaping Characters\nTo display a literal character that would otherwise be used to format text in a Markdown document, add a backslash (\\) in front of the character.\n\\* Without the backslash, this would be a bullet in an unordered list.\nThe rendered output looks like this:\n* Without the backslash, this would be a bullet in an unordered list.\nCharacters You Can Escape\nYou can use a backslash to escape the following characters.\nCharacter Name\n\\ backslash\n` backtick (see also escaping backticks in code)\n* asterisk\n_ underscore\n{ } curly braces\n[ ] brackets\n< > angle brackets\n( ) parentheses\n# pound sign\n+ plus sign\n- minus sign (hyphen)\n. dot\n! exclamation mark\n| pipe (see also escaping pipe in tables)\nHTML\nMany Markdown applications allow you to use HTML tags in Markdown-formatted text. This is helpful if you prefer certain HTML tags to Markdown syntax. For example, some people find it easier to use HTML tags for images. Using HTML is also helpful when you need to change the attributes of an element, like specifying the color of text or changing the width of an image.\nTo use HTML, place the tags in the text of your Markdown-formatted file.\nThis **word** is bold. This <em>word</em> is italic.\nThe rendered output looks like this:\nThis word is bold. This word is italic.\nHTML Best Practices\nFor security reasons, not all Markdown applications support HTML in Markdown documents. When in doubt, check your Markdown application’s documentation. Some applications support only a subset of HTML tags.\nUse blank lines to separate block-level HTML elements like <div>, <table>, <pre>, and <p> from the surrounding content. Try not to indent the tags with tabs or spaces — that can interfere with the formatting.\nYou can’t use Markdown syntax inside block-level HTML tags. For example, <p>italic and **bold**</p> won’t work.\nTake your Markdown skills to the next level.\nLearn Markdown in 60 pages. Designed for both novices and experts, The Markdown Guide book is a comprehensive reference that has everything you need to get started and master Markdown syntax.\nGet the Book\nWant to learn more Markdown?\nDon't stop now! 🚀 Star the GitHub repository and then enter your email address below to receive new Markdown tutorials via email. No spam!\nStay updated\nOverview\nHeadings\nParagraphs\nLine Breaks\nEmphasis\nBlockquotes\nLists\nCode\nHorizontal Rules\nLinks\nImages\nEscaping Characters\nHTML\nAbout     Contact     GitHub     API     Privacy Policy     Terms and Conditions\n© 2025. A Matt Cone project. CC BY-SA 4.0. Made with 🌶️ in New Mexico.",
        "URL actual": "https://www.markdownguide.org/basic-syntax/"
    }
]